--- @meta stubs_cs2dlua

--- Adds a Lua key bind for the specified key.
--- This bind will be active for all players and will trigger the key-hook when a player presses or releases the related key.
---
--- ℹ️ **Notes**:
--- * Please read the key-hook reference for further information.
--- * Consider removing the key bind with [removebind](lua://removebind) or [removeallbinds](lua://removeallbinds) as soon as you don't need it anymore.
---   This can save a lot of traffic if you use binds with keys that are pressed often.
--- * Adding key binds causes additional network traffic whenever a client presses/releases the bound key.
---
--- @param key bind_key_types The name of the key to bind.
---
--- @return binary_value `1` if the key bind was successfully added, `0` otherwise (invalid key name or already bound).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=addbind#cmd
---
--- @see removebind to remove the bind.
--- @see removeallbinds to remove all binds.
function addbind(key) end

--- Attaches the Lua function `func` to the specified hook. CS2D will call the Lua function whenever the event related to that hook occurs.
---
--- ℹ️ **Notes**:
--- * You can add multiple functions to the same hook, but too many can negatively impact performance, especially for frequently called hooks.
--- * Refer to the [list of available hooks](https://cs2d.com/help.php?luacat=all) for more details.
---
--- Hook Parameters:
--- * CS2D passes parameters to hooked Lua functions. The parameters depend on the hook and contain information about the event. Ensure you define the parameters in the function in the correct order if you want to use them.
---
--- Hook Return Value:
--- * Some hooks allow a return value to influence CS2D's behaviour. Returning nothing is equivalent to returning `0`, `""`, or `nil`.
--- * Returning `1` can skip the default action in CS2D. Refer to the hook's description for specific behaviour.
---
--- Hook Priority (Optional):
--- * Priority affects the execution order when multiple functions are attached to the same hook. Default is `0`.
--- * Higher priority functions (higher numbers) execute later. CS2D uses the return value of the last executed function with the highest priority.
---
--- Example:
--- ```lua
--- addhook("say", "mySayFunc")
--- function mySayFunc(playerId, chatMessage)
---   msg(player(playerId, "name") .. " just said " .. chatMessage)
---   return 1 -- Suppress normal chat output
--- end
--- ```
---
--- ⚠️ **Attention**:
--- * Both `hook` and `func` must be strings.
--- * Avoid passing parameters to the function name in the `addhook` call.
---
--- RIGHT:
--- ```lua
--- addhook("leave", "my_leave_hook")
--- ```
---
--- WRONG:
--- ```lua
--- addhook("leave(id,reason)", "my_leave_hook(id, reason)")
--- addhook(leave, my_leave_hook)
--- ```
---
--- @param hook hook_types The name of the hook to attach the function to.
--- @param func string The name of the Lua function to execute when the hook event occurs.
--- @param prio? number Optional priority of the hook. Defaults to `0`.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=addhook#cmd
---
--- @see freehook to free the hook.
--- @see sethookstate to set a hook's state.
function addhook(hook, func, prio) end

--- Bot with given identifier aims at the given position (`X`|`Y`) on the map (in pixels).
---
--- @param p player_id The bot's identifier.
--- @param x number The `X`-coordinate (in pixels) of the target position.
--- @param y number The `Y`-coordinate (in pixels) of the target position.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_aim#cmd
---
--- @see ai_rotate to rotate the bot instead.
function ai_aim(p, x, y) end

--- Bot with given ID performs an attack.
---
--- ℹ️ **Note**: Attacking won't work if the current weapon has limited ammo and is empty.
--- Neither reloading nor weapon switching will be triggered automatically.
--- If you want these things to happen automatically you can use [ai_iattack](lua://ai_iattack) instead.
--- Of course you can also manually trigger reloading ([ai_reload](lua://ai_reload)) or manually switch to another weapon ([ai_selectweapon](lua://ai_selectweapon)).
---
--- @param p player_id The bot's identifier.
--- @param secondary? binary_value Set secondary to `1` to use the secondary weapon function (=`attack2`) instead of the primary function.
---
--- @see playerammo to check how much ammo a player/bot has.
--- @see ai_iattack for intelligent attacks.
--- @see ai_reload to make the bot reload the current weapon.
--- @see ai_selectweapon to make the bot select a different weapon.
function ai_attack(p, secondary) end

--- Bot with given identifier tries to build a building at tile position (`X`|`Y`). Building has to be a building number id, not a string. The position has to be a free tile next to the current position of the bot.
---
--- Buildings (Class `1` only!):
--- ![Buildings List](https://cs2d.com/img/ref_dynamicobjects.png)
---
--- @param p player_id The bot's identifier.
--- @param building dynamic_object_type_id_types The building identifier (must be a number, not a string).
--- @param tx number The `X`-coordinate (tile position) of the building's location.
--- @param ty number The `Y`-coordinate (tile position) of the building's location.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_build#cmd
function ai_build(p, building, tx, ty) end

--- Bot with given identifier tries to purchase a certain item (`itemType`=number id, not a string).
---
--- ℹ️ **Note**: The bot has to be in a buy area to make this work. It does NOT walk into a buy area automatically when this command is called!
---
--- @param p player_id The bot's identifier.
--- @param itemType item_type_id_types The item type identifier (must be a number, not a string).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_buy#cmd
function ai_buy(p, itemType) end

--- Set debug-text for bot (only displayed if "`debugai`" is enabled).
---
--- @param p player_id The bot's identifier.
--- @param text string The debug text to display.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_debug#cmd
function ai_debug(p, text) end

--- Bot with given identifier drops the current weapon.
---
--- @param p player_id The bot's identifier.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_drop#cmd
function ai_drop(p) end

--- Returns the identifier of the closest enemy to the player with the specified identifier or `0` when no enemy was found. Only players who are close enough (inside the virtual screen of the player) will be returned. When fog of war is enabled, players behind walls won't be returned.
---
--- @param p player_id The player's identifier.
---
--- @return player_id playerId The identifier of the closest enemy or `0` if no enemy is found.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_findtarget#cmd
function ai_findtarget(p) end

--- Checks if there is a free line between the bot with the given identifier and the given position (`X`|`Y`) (in pixels).
---
--- @param p player_id The bot's identifier.
--- @param x number The `X`-coordinate (in pixels) of the target position.
--- @param y number The `Y`-coordinate (in pixels) of the target position.
---
--- @return boolean: `true` if there is a free line, `false` otherwise.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_freeline#cmd
function ai_freeline(p, x, y) end

--- Bot with the given identifier goes to tile (`X`|`Y`). Set walk to `1` to let it walk (silent).
---
--- @param p player_id The bot's identifier.
--- @param tx number The `X`-coordinate (in tiles) of the target position.
--- @param ty number The `Y`-coordinate (in tiles) of the target position.
--- @param walk binary_value Set to `1` to make the bot walk silently.
---
--- @return number `0` if failed to find path, `1` if the target is reached, or `2` if the bot is still moving.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_goto#cmd
---
--- @see ai_move to move a bot in a direction.
function ai_goto(p, tx, ty, walk) end

--- Bot with given identifier performs an intelligent attack.
--- This includes additional logic:
--- * If the current weapon has limited ammo, is empty, and has spare ammo, a reload will be triggered and attacking will continue after reloading.
--- * If the current weapon is entirely empty (no spare ammo), the bot will switch to the next best weapon that can be used for attacking (usually a pistol or melee).
---
--- @param p player_id The bot's identifier.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_iattack#cmd
---
--- @see playerammo to check how much ammo a player/bot has.
--- @see ai_attack for a simple attack (without checks).
function ai_iattack(p) end

--- Bot with given identifier moves into a certain direction (defined with the given angle from `0°` to `360°`).
---
--- @param p player_id The bot's identifier.
--- @param angle number The angle (in degrees) to move towards (`0°` to `360°`).
--- @param walk binary_value Set to `1` to make the bot walk.
---
--- @return binary_value `1` if successful, `0` if the way is blocked.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_move#cmd
---
--- @see ai_goto to tell a bot to go somewhere.
function ai_move(p, angle, walk) end

--- Bot with given identifier sends a radio message.
---
--- @param p player_id The bot's identifier.
--- @param radio_id radio_message_type_id_types The identifier of the radio message to send.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_radio#cmd
function ai_radio(p, radio_id) end

--- Bot with given identifier reloads the current weapon.
---
--- @param p player_id The bot's identifier.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_reload#cmd
function ai_reload(p) end

--- Bot with given identifier respawns (only if dead and only if the game mode allows it).
---
--- @param p player_id The bot's identifier.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_respawn#cmd
function ai_respawn(p) end

--- Bot with given identifier instantly turns to a certain direction/angle (from `0°` to `360°`).
---
--- @param p player_id The bot's identifier.
--- @param angle number The angle (in degrees) the bot should rotate to (`0°` to `360°`).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_rotate#cmd
---
--- @see ai_aim if you want to let a bot aim at a specified point.
function ai_rotate(p, angle) end

--- Bot with given identifier says the given text using the chat system.
---
--- @param p player_id The bot's identifier.
--- @param text string The text the bot should say.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_say#cmd
---
--- @see ai_sayteam for team chat.
function ai_say(p, text) end

--- Bot with given identifier says the given text to the own team only (using team chat).
---
--- @param p player_id The bot's identifier.
--- @param text string The text the bot should say to its team.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_sayteam#cmd
---
--- @see ai_say for regular chat.
function ai_sayteam(p, text) end

--- Bot with given identifier selects the weapon specified with `itemtype` (must be a number identifier, not the name of the weapon!).
---
--- @param p player_id The bot's identifier.
--- @param itemtype item_type_id_types The identifier of the weapon the bot should select.
--- > ℹ️ **Note**: The weapon has to be in the inventory of the bot already. Otherwise, nothing will happen.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_selectweapon#cmd
function ai_selectweapon(p, itemtype) end

--- Bot with given identifier sprays a spray logo at its current position.
---
--- @param p player_id The bot's identifier.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_spray#cmd
function ai_spray(p) end

--- Bot with given identifier uses the environment (like pressing the `use` key).
---
--- @param p player_id The bot's identifier.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=ai_use#cmd
function ai_use(p) end

--- Returns the SHA256 checksum of the file at this path.
---
--- Sample 1: Get the checksum of a connecting player's file and check it against the server-side file.
--- ```lua
--- addhook("clientdata", "check_file")
--- function check_file(id, mode, data1, data2)
---    if (mode == 4) then
---       if (checksumfile("gfx/player/t1.bmp") ~= data2) then
---          parse('kick '..id..' "You are using a modified file!"')
---       end
---    end
--- end
--- ```
---
--- Sample 2: Check the file checksum on player join.
--- ```lua
--- addhook("join", "req_check")
--- function req_check(id)
---    reqcld(id, 4, "gfx/player/t1.bmp")
--- end
--- ```
---
--- @param path string The file path to check the checksum of.
---
--- @return string checksum The SHA256 checksum of the file as a string.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=checksumfile#cmd
function checksumfile(path) end

--- Returns the SHA256 checksum of the given string.
---
--- Sample 1: Get the checksum of a player's name.
--- ```lua
--- addhook("join", "name_sum")
--- function name_sum(id)
---    msg2(id, "Welcome! Your name's checksum is: " .. checksumstring(player(id, "name")))
--- end
--- ```
---
--- @param string string The input string to check the checksum of.
---
--- @return string checksum The SHA256 checksum of the string.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=checksumstring#cmd
function checksumstring(string) return string end

--- Returns the tile x and y position (2 values!) of the closest living and unused hostage to a given player.
--- Returns `-100, -100` if no hostage has been found.
---
--- ℹ️ **Note**: The returned position is in tiles, NOT in pixels!
---
--- Sample 1: Getting the position of a hostage which is close to player 1
--- ```lua
--- x, y = closehostage(1)
--- ```
---
--- @param p player_id The player identifier.
---
--- @return number tx, number ty The `X` and `Y`-coordinates of the closest hostage in tiles.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=closehostage#cmd
function closehostage(p) end

--- Returns a Lua table with all identifiers of items which are close to the player specified with the id parameter.
--- Only dropped items within the range will be returned. The unit for the range is tiles (range `1` equals `32` pixels).
---
--- Sample 1: List the names of all items which are close (within range of `5` tiles) to player `1`
--- ```lua
--- local item_list = closeitems(1, 5)
--- for _, id in pairs(item_list) do
---    print(item(id, "name"))
--- end
--- ```
---
--- @param p player_id The player identifier.
--- @param range number The range in tiles.
---
--- @return table<number, item_type_id_types> item_list A table containing item identifiers.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=closeitems#cmd
function closeitems(p, range) end

--- Returns a list of objects within the specified radius (in pixels) around the specified position (`X`|`Y`) in pixels.
--- Use `type` to limit the search to objects with a certain type only.
---
--- Object types: ![Objects list](https://cs2d.com/img/ref_dynamicobjects.png)
---
--- Sample 1: Get the identifiers of objects within a `300` pixel radius around the top left corner (`0`|`0`) of the map:
--- ```lua
--- local object_list = closeobjects(0, 0, 300)
--- for _, id in pairs(object_list) do
---    print(id)
--- end
--- ```
---
--- @param x number The `X`-coordinate in pixels.
--- @param y number The `Y`-coordinate in pixels.
--- @param radius number The radius in pixels.
--- @param type? dynamic_object_type_id_types Optional. The type of object to search for.
---
--- @return table<number, dynamic_object_type_id_types> object_list A table containing object identifiers within the specified radius.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=closeobjects#cmd
function closeobjects(x, y, radius, type) end

--- Returns a list of all alive players (identifiers) within the specified radius (in pixels) around the specified position (`X`|`Y`) in pixels.
---
--- You can optionally specify a team to limit the search to players of that team:
--- * `0` - all teams (default)
--- * `1` - Ts only
--- * `2` - CTs only (including VIPs)
---
--- The players in the resulting list have no specific order.
--- The list may be empty if no matching player is found.
---
--- ℹ️ **Note**: The position (`X`|`Y`) and the radius are specified in PIXELS!
---
--- @param x number The `X`-coordinate in pixels.
--- @param y number The `Y`-coordinate in pixels.
--- @param radius number The radius in pixels.
--- @param team? player_team_type_id The team identifier (`0` for all teams, `1` for Ts, `2` for CTs).
---
--- @return table<number, player_id> players A table containing player identifiers within the specified radius.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=closeplayers#cmd
---
--- @see hascloseplayers if you only want to check if ANY player is within a radius (faster).
function closeplayers(x, y, radius, team) end

---@todo continue here with alias creation
--- Returns a value of an entity at the tile position (`X`|`Y`):
---
--- ⚠️ **Attention**: `Env_Decal` entities are NOT accessible with this command.
---
--- @param tx number The `X`-coordinate of the entity in tiles.
--- @param ty number The `Y`-coordinate of the entity in tiles.
--- @param value string The specific value to fetch (e.g., `"exists"`, `"typename"`, `"state"`).
--- > * `"exists"`: boolean, `true` if there is an entity at this position, `false` otherwise
--- > * `"typename"`: name of that entity type
--- > * `"type"`: internal type identifier for that entity
--- > * `"name"`: name entered in the name field of that entity
--- > * `"trigger"`: value(s) entered in the trigger field of that entity
--- > * `"state"`: boolean, `false` if visible/on (default), `true` otherwise
--- > * `"int0"` - `int9:` internal number for settings/states
--- > * `"str0"` - `str9`: internal string for settings/states
--- > * `"aistate"`: AI state for AI scripting, can be set with `setentityaistate`
---
--- > ℹ️ **Note**: `"int0"`-`"int-9"` and `"str0"`-`"str9"` are used for entity settings/states and vary for each entity type.
---
--- @return string data The requested value for the entity.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=entity#cmd
---
--- @see entitylist for list of entities as there is no entity(0, "table").
function entity(tx, ty, value) end

--- Returns a list (Lua table) of positions (as X and Y tile coordinates) of all entities (except for `Env_Decal`).
--- You can limit the output to a specific entity type by using the optional `type` parameter.
---
--- Use a "`for`"-loop with "`in pairs`" to process the resulting list properly.
---
--- Sample 1: Iterating over list using in pairs:
--- ```lua
--- local list = entitylist()
--- for _, e in pairs(list) do
---    print("entity @ ("..e.x..","..e.y..") - "..entity(e.x, e.y, "typename"))
--- end
--- ```
---
--- ℹ️ **Note**: The resulting "list" is a Lua table with one sub-table per entity, containing the fields `X` and `Y`.
---
--- ⚠️ **Attention**: `Env_Decal` entities are NOT included in this list.
---
--- @param type? number Optional. The type of entity to filter by.
---
--- @return table list A table of entities with their positions.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=entitylist#cmd
---
--- @see entity to get information on an entity.
function entitylist(type) end

--- Returns if the coordinate defined in pixels at x|y is currently hidden by the fog of war (`1`) or not (`0`).
--- The visibility is calculated for the player with the given identifier, considering its current position and rotation.
---
--- ⚠️ **Attention**: This check is slow and recalculates the fog of war each time it is called. Frequent calls may cause performance issues.
---
--- @param p player_id The player identifier.
--- @param x number The `X`-coordinate in pixels.
--- @param y number The `Y`-coordinate in pixels.
---
--- @return number visibility `1` if hidden by fog of war, `0` if not.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=fow_in#cmd
function fow_in(p, x, y) end

--- Removes a function from a hook.
--- Nothing happens if the function has not been attached to the hook with [addhook](lua://addhook) before.
---
--- @param hook string The hook name to remove the function from.
--- @param func string The name of the function to remove from the hook.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=freehook#cmd
---
--- @see addhook to add a hook.
--- @see sethookstate to set a hook's state.
function freehook(hook, func) end

--- Removes an image completely.
---
--- ⚠️ **Attention**: The variable(s) you used to save the image identifier will NOT be changed by CS2D! Please set them to `nil` manually.
--- CS2D recycles image identifiers! A new image might receive the same identifier after removal, so ensure the variable is set to `nil`.
---
--- @param img_id number The identifier of the image to remove.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=freeimage#cmd
---
--- @see image to create an image.
--- @see imagealpha to hide the image (with alpha = `0`) as opposed to freeing the image.
function freeimage(img_id) end

--- Removes timers which call the specified `"function"` with the specified `"parameter"`.
---
--- If `"parameter"` is not set (or `""`), all timers with the matching `"function"` will be removed.
---
--- If neither `"function"` nor `"parameter"` is set (or if both are `""`), this will remove **ALL** existing timers.
---
--- Once a timer has been removed, it won't be executed anymore.
--- You can create the same timer again if needed.
---
--- ℹ️ **Note**: Timers with a limited call count will automatically remove themselves when they expire.
---
--- ⚠️ **Attention**: Be careful with the parameters. If both are empty strings (""), all timers will be removed!
---
--- @param func? string The function name to remove timers for.
--- @param param? string Optional. The parameter associated with the function to remove timers for.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=freetimer#cmd
---
--- @see timer to create a timer.
function freetimer(func, param) end

--- Shows Lua functions in the Lua main table in the console of CS2D for debugging purposes only.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=funcs#cmd
---
--- @see vars to print all variables.
function funcs() end

--- Returns a game state/setting.
--- You can use most settings like "`sv_name`" to get their current value as a string.
--- Some settings have multiple commands to set them, in which case the long version should work (e.g., '"sv_gamemode"' instead of '"sv_gm"').
---
--- @param game_setting setting_command The game setting to retrieve.
---
--- > ℹ️ **Note**: Game will only return values for simple settings which are set with functions with one parameter.
---
--- @return string value The value of the game setting, as a string.
--- > ℹ️ **Note**: This command always returns a string for game settings. Be mindful of casting when performing operations on the returned values.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=game#cmd
function game(game_setting) end

--- Checks if any alive player is within the specified radius (in pixels) around the specified position (`X`|`Y`) in pixels.
--- Returns `true` if at least one player matching the criteria was found, otherwise returns `false`.
---
--- This method is faster than [closeplayers](lua://closeplayers) because it returns a simple boolean and cancels the search once a matching player is found within the radius.
---
--- ℹ️ **Note**: The position (`X`|`Y`) and the radius are specified in pixels!
---
--- @param x number The x position to check around (in pixels).
--- @param y number The y position to check around (in pixels).
--- @param radius number The radius around the position to search in pixels.
--- @param team? number Optional. The team to limit the search to (default: `0` for all teams).
--- > You can optionally specify a team to limit the search to players of that team:
--- > * `0` - all teams (default)
--- > * `1` - Ts only
--- > * `2` - CTs only (including VIPs)
---
--- @return boolean value Returns `true` if a player is within the radius, `false` otherwise.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=hascloseplayers#cmd
---
--- @see closeplayers if you also want to know which player(s) are within the radius (slower).
function hascloseplayers(x, y, radius, team) end

--- Returns a value of a hostage.
---
--- Additionally, `hostage(0, "table")` returns a Lua table with all hostage identifiers.
---
--- Sample usage: Using the hostage table to list the identifiers of all hostages:
--- ```lua
--- local hostage_list = hostage(0, "table")
--- for _, id in pairs(hostage_list) do
---     print(id)
--- end
--- ```
---
--- @param hostageID number The identifier of the hostage to query.
--- @param value string The specific value to retrieve (e.g., "exists", "health", etc.).
--- > * "exists": boolean, `true` if hostage with this identifier exists, `false` otherwise
--- > * "health": number, hostage health (`0`-`100`)
--- > * "follow": number, player identifier if the hostage is following a player, `0` otherwise
--- > * "used": boolean, `true` if the hostage has been used by a counter-terrorist this round, `false` otherwise
--- > * "look": number, hostage look (skin frame)
--- > * 'x': number, current `X` position on map (in pixels)
--- > * 'y': number, current `Y` position on map (in pixels)
--- > * "rot": number, current rotation angle
--- > * "tilex": number, current `X` position on map (in tiles)
--- > * "tiley": number, current `Y` position on map (in tiles)
---
--- @return boolean|number property Depending on the query, returns a boolean or a number.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=hostage#cmd
function hostage(hostageID, value) end

--- Creates an image (dynamic object) on the map and returns the identifier for that image.
--- The path is relative to the CS2D folder. The position is defined via `X` and `Y` in pixels. Mode defines how the image is displayed (see list below).
--- Use the optional player parameter if you want the image to be visible to a certain player only (it's visible to all players by default).
---
--- Possible modes:
--- > * Mode `0` - floor image (covered by players, etc.)
--- > * Mode `1` - top image (covering players)
--- > * Mode `2` - HUD image (covering everything, part of the interface, affected by mp_hudscale)
--- > * Mode `3` - super top image (covering everything on the map)
--- > * Mode `4` - background image (covering only the background)
--- > * Mode `101`-`132` - draw at player, covered by player (player id + `100`)
--- > * Mode `201`-`232` - draw at player, covering player (player id + `200`)
--- > * Mode `133`-`164` - draw at player, covering player and entity images (player id + `132`)
---
--- Meaning of `X` and `Y` when drawing at player:
--- When drawing an image at a player (mode `101`-`232`), `X` and `Y` are not used for the position (because it's defined by the player).
--- Instead, `X` affects rotation and movement behaviour related to the player. `Y` affects fog of war visibility.
--- > * `x <= 0` - do not rotate image with player
--- > * `x == 1` - rotate image with player
--- > * `x == 2` - rotate and wiggle image with player
--- > * `x == 3` - rotate and wiggle image with player and move correctly with recoil
--- > * `y <= 0` - only draw if not covered by fog of war (always if fog of war is disabled)
--- > * `y > 0` - draw always
---
--- Masking tags:
--- You can append a masking tag to the end of the path to change how the image is masked:
--- > * PATH`<b>` - black pixels (rgb `0,0,0` or HEX `#000000`) will become invisible in the specified image (default mode)
--- > * PATH`<m>` - magenta pixels (rgb `255,0,255` or HEX `#FF00FF`) will become invisible in the specified image
--- > * PATH`<a>` - alpha values (opacity) will be set depending on the brightness of pixels (bright = opaque, dark = transparent)
--- > * PATH`<n>` - no masking. The image will be loaded and displayed as it is.
---
--- Built-in images/effects:
--- You can use some built-in images by using one of the following values for the path parameter:
--- > * `<tile:X>` - a tile from the tile-set that is used in the current map (X is the tile identifier, starting at `0`)
--- > * `<flag:iso>` - a small flag image (`16`X`11` pixels) for the given country ISO-3166 ALPHA-2 code (e.g., AE for UAE, DE for Germany, US for the USA)
--- > * `<avatar:id>` - the avatar for the player with this player identifier (only displays if the player has an avatar via Steam or U.S.G.N.)
--- > * `<light>` - a light with a radius of 128 pixels (visible with the light engine enabled, colour and alpha from the image)
---
--- Sprite-sheets:
--- You can use the path `<spritesheet:PATH:FRAMEW:FRAMEH[:MODE]>` to load a spritesheet (a set of images/frames stored in one file).
--- `FRAMEW` and `FRAMEH` specify the width and height of one frame, `MODE` is an optional masking mode to be applied to the image.
--- Only one frame of the sheet will be displayed by default (the first frame). You can change the frame using [imageframe](lua://imageframe).
---
--- ℹ️ **Notes**:
--- * Always save the returned identifier in a variable. Otherwise, you won't be able to remove or change the image!
--- * The game will automatically remove ALL images when a new round begins!
--- * Images created with this function are a special type of dynamic object (object type `40`).
--- * Using too many images can lead to performance issues.
---
--- Sample 1: An image visible to all players and part of the HUD (mode 2), covering the radar
--- ```lua
--- image("gfx/hud_buildhelper.png", 0, 0, 2)
--- ```
---
--- Sample 2: Creating an image and changing its look and position/rotation
--- ```lua
--- local id = image("gfx/sprites/flare2.bmp", 0, 0, 2)
--- imagecolor(id, 255, 255, 0)
--- imageblend(id, 1)
--- imagealpha(id, 0.5)
--- imagescale(id, 2, 3)
--- imagepos(id, 30, 30, 45)
--- ```
---
--- ```lua
--- Sample 3: Creating a spritesheet and changing its frame
--- local id = image("<spritesheet:gfx/buildings.png:32:32:n>", 1, 0, 201)
--- imageframe(id, 3)
--- ```
---
--- @param path string The path to the image file (relative to the CS2D folder).
--- @param x number The x position (in pixels).
--- @param y number The y position (in pixels).
--- @param mode number The display mode for the image.
--- @param player? number Optional. The player identifier to restrict visibility to a certain player (default: visible to all).
---
--- @return number img_id The identifier of the created image.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=image#cmd
function image(path, x, y, mode, player) end

--- Changes the opacity (alpha) of an image, where `0.0` is fully transparent and `1.0` is fully opaque.
--- This can be used to make an image semi-transparent, fully opaque, or hide it completely (alpha = `0`).
---
--- @param img_id number: The identifier of the image to modify.
--- @param alpha number: The desired opacity value between `0.0` (fully transparent) and `1.0` (fully opaque).
---
--- Sample usage:
--- ```lua
--- local id = image("gfx/sprites/flare2.bmp", 0, 0, 2)
--- imagealpha(id, 0.5)  -- Set opacity to 50% (semi-transparent)
--- ```
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imagealpha#cmd
---
--- @see freeimage to free the image as opposed to hiding (with alpha = `0`) the image.
--- @see tween_alpha to set an image's alpha gradually.
function imagealpha(img_id, alpha) end

--- Changes the blend mode of an image, affecting how it blends with other images drawn later.
--- Blend modes control how the current image interacts with the underlying pixels.
--- Commonly used for effects like transparency, glow, and other visual effects.
---
--- @param img_id number: The identifier of the image to modify.
--- @param mode number: The blend mode to apply. Possible values:
--- > * `0` - Normal (default)
--- > * `1` - Additive (brightens underlying colours)
--- > * `2` - Subtractive (darkens underlying colours)
--- > * `3` - Multiply (darkens colours)
--- > * `4` - Screen (brightens colours)
--- > * `5` - Invert (inverts the colour)
--- > * `6` - Overlay (combines multiply and screen effects)
---
--- Sample usage:
--- ```lua
--- local id = image("gfx/sprites/flare2.bmp", 0, 0, 2)
--- imageblend(id, 1)  -- Set the blend mode to additive
--- ```
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imageblend#cmd
function imageblend(img_id, mode) end

--- Changes the colour of an image by applying specified RGB values.
--- The colour is defined using red, green, and blue components, each ranging from `0` (black) to `255` (full colour brightness).
--- You can use a colour picker to get the RGB values.
--- Example: https://www.google.com/search?q=colourpicker
---
--- @param img_id number: The identifier of the image to modify.
--- @param red number: The red component of the colour (`0` to `255`).
--- @param green number: The green component of the colour (`0` to `255`).
--- @param blue number: The blue component of the colour (`0` to `255`).
---
--- Sample usage:
--- ```lua
--- local id = image("gfx/sprites/flare2.bmp", 0, 0, 2)
--- imagecolor(id, 0, 255, 0)  -- Change the image colour to green
--- ```
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imagecolor#cmd
---
--- @see tween_color to change an image's colour gradually.
function imagecolor(img_id, red, green, blue) end

--- Changes the frame of the spritesheet image with the specified identifier.
--- This has no effect if the image is not a spritesheet.
---
--- The frame numbering starts at `1` for the first frame. If you attempt to set the frame to a value lower than `1` or greater than the maximum number of frames,
--- it will automatically adjust to the first or last frame respectively.
---
--- Frames are numbered from left to right and from top to bottom. For example, in a spritesheet with `4` frames, the top left frame is frame `1`,
--- and the bottom right frame is the last frame.
---
--- Refer to the example spritesheet image for better understanding:
---
--- ![Spritesheet Example](https://cs2d.com/img/spritesheet.png)
---
--- @param img_id number: The identifier of the image (spritesheet) to modify.
--- @param frame number: The frame number to display. It should be between `1` and the total number of frames.
---
--- Sample usage:
--- ```lua
--- local id = image("<spritesheet:gfx/buildings.png:32:32:n>", 1, 0, 201)
--- imageframe(id, 3)  -- Change the frame to the 3rd frame of the spritesheet
--- ```
---
--- ℹ️ **Note**: The image must be loaded as a spritesheet using the [image](lua://image) function so that it contains multiple frames.
---
--- ⚠️ **Attention**: The frame numbering is `1`-based for this command. The first frame is `1`, and the last frame corresponds to the total number of frames.
---
--- ℹ️ **Note**: For animating a spritesheet, consider using [tween_animate](lua://tween_animate) or [tween_frame](lua://tween_frame),
--- as they are more efficient and cause less network traffic than changing frames manually.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imageframe#cmd
---
--- @see tween_animate to animate an images' frames.
--- @see tween_frame to change an image's frame gradually.
function imageframe(img_id, frame) end

--- Adds, removes, or modifies a hit zone for an image, allowing it to react to shots or attacks.
--- Each hit zone triggers the `hitzone` hook when it is hit by a shot or attack.
---
--- Available modes:
---
--- **Non-Blocking Modes (<= `100`, shots will pass through):**
--- > * `0` - Removes any existing hit zones (other parameters don't matter).
--- > * `1` - Hit zone without effects (just registers the zone).
--- > * `2` - Wall effect (hit zone causes a wall effect).
--- > * `3` - Blood effect (hit zone triggers blood effect).
--- > * `4` - Green blood effect (hit zone triggers green blood effect).
---
--- **Blocking Modes (> `100`, shots will be stopped):**
--- > * `101` - Hit zone without effects + stop shot.
--- > * `102` - Wall effect + stop shot.
--- > * `103` - Blood effect + stop shot.
--- > * `104` - Green blood effect + stop shot.
---
--- All hit zones with modes above `100` will block shots, preventing objects behind them from being damaged.
--- These behave like walls but have no effect on player movement or vision.
---
--- ℹ️ **Notes**:
--- > * Images are usually centred. For a `100`X`100` pixel image, the hit zone should have the following values:
--- >   * `x-offset`: `-50`
--- >   * `y-offset`: `-50`
--- >   * `width`: `100`
--- >   * `height`: `100`
--- >   * So, `x-offset` is typically `-width`/`2` and `y-offset` is `-height`/`2`.
--- > * Each image can only have one hit zone. Calling `imagehitzone` multiple times will modify the existing hit zone.
--- > * To remove an existing hit zone, call [imagehitzone](lua://imagehitzone) with mode `0`.
--- > * The hit zone is always rectangular and unaffected by image rotation.
--- > * Defining many hit zones may negatively impact game performance (particularly when shooting).
--- > * Hit zones do not work with images drawn as HUD (mode `2`).
--- > * Thin hit zones may not react correctly to all shots; it is recommended to have a minimum width and height of `10` pixels.
---
--- @param img_id number: The identifier of the image to which the hit zone will be applied.
--- @param mode number: The mode of the hit zone (defines its effect and whether it blocks shots).
--- @param xOffset number: The x-axis offset of the hit zone (relative to the image centre).
--- @param yOffset number: The y-axis offset of the hit zone (relative to the image centre).
--- @param width number: The width of the hit zone.
--- @param height number: The height of the hit zone.
---
--- Sample usage:
--- ```lua
--- local id = image("gfx/sprites/target.png", 0, 0, 2)
--- imagehitzone(id, 102, -50, -50, 100, 100)  -- Apply a wall effect and block shots
--- ```
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imagehitzone#cmd
function imagehitzone(img_id, mode, xOffset, yOffset, width, height) end

--- Returns various properties of an image based on the specified value.
--- The exact meaning of the returned values may vary depending on the image mode.
---
--- Available values to retrieve:
---   * **x**: The x-position of the image on the map (in pixels). The meaning can change depending on the image mode.
---   * **y**: The y-position of the image on the map (in pixels). The meaning can change depending on the image mode.
---   * **rot**: The current rotation angle of the image (in degrees). Returns `0` if the image is not rotated.
---   * **alpha**: The alpha transparency value of the image, ranging from `0.0` (completely transparent) to `1.0` (completely opaque).
---   * **path**: The string path to the image (e.g., "gfx/sprites/flare.png").
---   * **frame**: The current animation frame of the image (for images with multiple frames).
---   * **width**: The width of the image in pixels.
---   * **height**: The height of the image in pixels.
---   * **framecount**: The total number of animation frames for the image.
---
--- ℹ️ **Notes**:
--- * If the image with the specified identifier does not exist, the function will return a boolean `false`.
--- * Images are treated as objects internally. You can use object methods to retrieve additional values if needed.
---
--- @param img_id number: The identifier of the image to retrieve parameters from.
--- @param value string: The specific value to retrieve. Can be one of the options listed above (e.g., "x", "y", "rot").
---
--- @return string|number property Returns the requested property value (string for path, otherwise number for others).
--- @nodiscard
---
--- Sample usage:
--- ```lua
--- local id = image("gfx/sprites/flare.png", 0, 0, 2)
--- local xPos = imageparam(id, "x")  -- Get the x-position of the image
--- local alpha = imageparam(id, "alpha")  -- Get the alpha transparency of the image
--- ```
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imageparam#cmd
function imageparam(img_id, value) end

--- Changes the position (`X` & `Y`, in pixels) and rotation (`rot`, `0°`-`360°`) of an image.
---
--- ℹ️ **Notes**:
--- * `X` and `Y` specify the position on the map in pixels, with (`0`, `0`) being the top-left corner.
--- * `rot` is the rotation in degrees, ranging from `0` to `360`. A `0` degree rotation means no rotation, which is the default for new images.
--- * Depending on the image mode, the meaning of `X`, `Y`, and `rot` may vary. Refer to the image documentation for details.
---
--- **Sample usage**:
--- ```lua
--- local id = image("gfx/sprites/flare2.bmp", 0, 0, 2)
--- imagecolor(id, 255, 255, 0)
--- imageblend(id, 1)
--- imagealpha(id, 0.5)
--- imagescale(id, 2, 3)
--- imagepos(id, 30, 30, 45)  -- Set position to (30, 30) and rotate by 45 degrees
--- ```
---
--- @param img_id number: The identifier of the image to modify.
--- @param x number: The `X`-position (in pixels) on the map.
--- @param y number: The `Y`-position (in pixels) on the map.
--- @param rot number: The rotation angle of the image in degrees (`0`-`360`).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imagepos#cmd
---
--- @see tween_move to change an image's position gradually.
--- @see tween_rotate to change an image's rotation gradually.
function imagepos(img_id, x, y, rot) end

--- Enables or disables the shadow effect for an image.
--- This does not add a shadow, this will turn the image into a shadow.
---
--- ℹ️ **Note**: It is recommended to use [imagecolor](lua://imagecolor) to turn the image into pitch black for a convincing shadow.
---
--- **Example usage**:
--- ```lua
--- local id = image("gfx/sprites/flare2.bmp", 0, 0, 2)
--- imageshadow(id, 1)  -- Enable shadowing for the image
--- ```
---
--- @param img_id number: The identifier of the image to modify.
--- @param value number: `0` to disable the shadow, `1` to enable the shadow.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imageshadow#cmd
function imageshadow(img_id, value) end

--- Changes the image scale factors (in other words: the image size).
---
--- ℹ️ **Notes**:
--- * `X` and `Y` are factors and default to `1` (original image size).
--- * A value of `2` would double the size, `0.5` would half the size, etc.
--- * If the image is a light, `X` will be used as a factor for the light radius, and `Y` will be ignored.
---
--- **Sample usage**:
--- ```lua
--- local id = image("gfx/sprites/flare2.bmp", 0, 0, 2)
--- imagecolor(id, 255, 255, 0)
--- imageblend(id, 1)
--- imagealpha(id, 0.5)
--- imagescale(id, 2, 3)  -- Set scale to 2x width and 3x height
--- imagepos(id, 30, 30, 45)
--- ```
---
--- @param img_id number: The identifier of the image to modify.
--- @param width number: The horizontal scale factor (width).
--- @param height number: The vertical scale factor (height).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=imagescale#cmd
---
--- @see tween_scale to set an image's scale gradually.
function imagescale(img_id, width, height) end

--- Checks if the tile position (`X`|`Y`) is inside the area of a certain entity type and returns `true` if this is the case, and `false` otherwise.
--- The "area" of an entity depends on the entity type and, in some cases, on its properties.
---
--- **Special entity area sizes**:
--- * `Info_T` / `Info_CT`: `5x5` tiles (entity in the centre)
--- * `Info_RescuePoint`: `3x3` tiles (entity in the centre)
--- * `Info_BombSpot`: `5x5` tiles (entity in the centre)
--- * `Info_NoBuildings`: Depending on entity settings
--- * `Info_TeamGate`: Depending on entity settings
--- * `Info_NoWeather`: Depending on entity settings
--- * `Env_Hurt`: Depending on entity settings
--- * `Env_Room`: Depending on entity settings
---
--- All other entities have an area of `1x1` tiles at the entity position.
--- For these entities, [inentityzone](lua://inentityzone) only returns `true` if an entity of the specified type is at the exact same tile position.
---
--- ℹ️ **Notes**:
--- * This command has been implemented for performance reasons. It's much faster to use [inentityzone](lua://inentityzone) than checking all entities manually in a Lua script.
--- * CS2D internally uses a 2D cache array (built at map load time) for very fast checks if there is any entity area on a tile position.
---
--- **Sample usage**:
--- ```lua
--- local tx, ty = 10, 5
--- if inentityzone(tx, ty, "Info_T") then
---     print("Tile is inside the area of a T entity")
--- else
---     print("Tile is not inside the area of a T entity")
--- end
--- ```
---
--- @param tx number: The `X`-coordinate of the tile to check.
--- @param ty number: The `Y`-coordinate of the tile to check.
--- @param type string: The type of the entity to check for.
---
--- @return boolean value Returns `true` if the tile is inside the area of the specified entity type, `false` otherwise.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=inentityzone#cmd
function inentityzone(tx, ty, type) end

--- Returns a value of an item instance on the map.
---
--- **Available values**:
---   - `exists`: `boolean`, `true` if an item with that identifier exists, `false` otherwise.
---   - `name`: The name of the item.
---   - `type`: Internal item type identifier.
---   - `player`: identifier of the player that carries this item, or `0` if it is dropped.
---   - `ammo`: The ammo supply for that weapon (not loaded into it).
---   - `ammoin`: Ammo currently loaded into the weapon.
---   - `mode`: Weapon mode (e.g., colour of laser, silenced or not).
---   - `X`: X position of the dropped weapon on the map (in tiles).
---   - `Y`: Y position of the dropped weapon on the map (in tiles).
---   - `dropped`: `boolean`, `true` if the weapon has been dropped by a player, `false` otherwise.
---   - `droptimer`: How long ago the weapon was dropped (in seconds).
---
--- **Additional functionality**:
---   - `item(0, "table")`: Returns a Lua table with all identifiers of items currently on the map (the unique instance identifiers, not the type identifiers).
---
--- **Item names and type identifiers**:
---   - For a reference of item names and type identifiers, refer to [CS2D items reference](https://cs2d.com/img/ref_items.png).
---
--- **Sample usage**:
--- ```lua
--- local item_list = item(0, "table")
--- for _, id in pairs(item_list) do
---     print(item(id, "name"))
--- end
--- ```
---
--- ℹ️ **Note**:
---   - Items carried by players cannot be accessed with this command. Use [playerweapons](lua://playerweapons) to get a list of item types a player currently carries.
---
--- @param itemID number: The unique identifier of the item instance on the map.
--- @param value string: The value you want to retrieve (e.g., `"name"`, `"ammo"`, etc.).
---
--- @return string|number|boolean property Returns the requested value for the item (e.g., string for name, number for ammo, or boolean for existence).
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=item#cmd
---
--- @see playerweapons for a list of item types a player currently carries.
function item(itemID, value) end

--- Returns a value of an item type.
---
--- **Available values**:
---   - `"name"`: The name of the item, returns an empty string (`""`) if no item with this type exists.
---   - `"dmg"`: The damage caused by this item.
---   - `"dmg_z1"`: The damage caused with zoom level 1 (secondary attack mode).
---   - `"dmg_z2"`: The damage caused with zoom level 2.
---   - `"rate"`: The fire rate of the weapon.
---   - `"reload"`: The reload duration for the weapon.
---   - `"ammo"`: The amount of ammo that can be carried with the weapon.
---   - `"ammoin"`: The amount of ammo that can be loaded into the weapon.
---   - `"price"`: The price of the item.
---   - `"range"`: The weapon range.
---   - `"dispersion"`: The weapon dispersion.
---   - `"slot"`: The item HUD slot.
---   - `"recoil"`: The weapon recoil.
---
--- ℹ️ **Note**: Do not confuse the identifier of an item instance on the map (retrieved via the `item` command) with the type identifier.
--- Each item has a unique instance identifier, but multiple items can share the same type identifier.
---
--- @param type number: The type identifier of the item.
--- @param value string: The value you want to retrieve (e.g., `"name"`, `"dmg"`, etc.).
---
--- @return string|number property Returns the requested value for the item type (e.g., string for name, number for damage, etc.).
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=itemtype#cmd
function itemtype(type, value) end

--- Returns info about the current map.
---
--- **Available values**:
--- * `"name"`: The name of the map.
--- * `"xsize"`: The x size of the map in tiles.
--- * `"ysize"`: The y size of the map in tiles.
--- * `"tileset"`: The tile-set file used in the map.
--- * `"tilesize"`: The size of each tile in the tile-set (either 32 or 64 pixels).
--- * `"tilecount"`: The number of tiles in the tile-set.
--- * `"back_img"`: The background image for the map (empty if there is none).
--- * `"back_scrollx"`: The x scrolling speed of the background.
--- * `"back_scrolly"`: The y scrolling speed of the background.
--- * `"back_scrolltile"`: Whether the background scrolls like tiles (0 or 1).
--- * `"back_r"`: The red value for the background colour.
--- * `"back_g"`: The green value for the background colour.
--- * `"back_b"`: The blue value for the background colour.
--- * `"storm_x"`: The x speed of the storm.
--- * `"storm_y"`: The y speed of the storm.
--- * `"mission_vips"`: The number of VIP spawns.
--- * `"mission_hostages"`: The number of hostages.
--- * `"mission_bombspots"`: The number of bomb spots.
--- * `"mission_ctfflags"`: The number of CTF flags.
--- * `"mission_dompoints"`: The number of domination points.
--- * `"nobuying"`: Whether buying is allowed (0 or 1).
--- * `"noweapons"`: Whether weapons are allowed (0 or 1).
--- * `"teleporters"`: Whether there are teleporters (0 or 1).
--- * `"botnodes"`: The number of bot nodes.
---
--- ℹ️ **Note**: The function returns information specific to the current map.
---
--- @param value string: The value you want to retrieve (e.g., `"name"`, `"xsize"`, etc.).
---
--- @return string|number property Returns the requested value for the map (e.g., string for name, number for size, etc.).
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=map#cmd
function map(value) end

--- Opens a menu on the screen of a certain player (`id`=player id) or for every player (`id`=`0`).
---
--- **Menu Content Scheme**: `"title,b1,b2,...,b9"`
--- * `"title"`: The title of the menu. Attach `"@b"` at the end of the title for a bigger menu, or `"@i"` for an invisible menu.
--- * `"b1-b9"`: Up to `9` button captions. Use empty strings for buttons you don't need. Captions can be split into two parts with `'|'` (scheme: `"left caption|right caption"`). You can also put `"()"` around a caption to disable a button.
---
--- **Menu Hook**:
--- * The `menu-hook` is executed when a player clicks a menu button with the mouse or presses the corresponding numeric key.
---
--- **Examples**:
--- * `menu(1,"Sample Menu With 3 Buttons,Button 1,Button 2,Button 3")`
--- * `menu(2,"Big Menu With 3 Buttons@b,Button 1,Button 2,Button 3")`
--- * `menu(1,"Space,Button 1,,Button 2")` (Creates space between Button 1 and Button 2)
--- * `menu(1,"Custom Buy Menu,Item 1|$5,Item 2|$50,(Item 3|$999999),Item 4|$0")` (Shows a disabled button)
--- * `menu(1,"Hidden@i,b1,b2,b3")` (Invisible menu for numeric key capture)
---
--- **Menu Hook Usage**:
---   ```lua
---   addhook("menu", "myMenu")
---   function myMenu(id, title, button)
---       msg("Player " .. player(id, "name") .. " has pressed button #" .. button .. " in the menu '" .. title .. "'!")
---   end
---   ```
---
--- @param p player_id: The player id (`0` for all players).
--- @param content string: A string defining the content and structure of the menu.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=menu#cmd
function menu(p, content) end

--- Sends a message to all players as a server message displayed in the chat area (bottom left).
---
--- **Colouring the Message**:
--- * Prepend the `text` with an RGB colour code: `"\169RRRGGGBBB"`. Use a colour picker to get the RGB values.
---   - Example: `\169000255000` for green. Ensure no space exists between the colour code and the text.
---
--- **Displaying Text at the Centre**:
--- * Append `@C` to display the message at the centre of the screen.
---   - Example: `"This text is displayed at the centre@C"`.
---
--- **UTF-8 Encoding**:
--- * Prefix the text with `"UTF-8:"` to send encoded UTF-8 strings. Use [this tool](https://mothereff.in/utf-8) to encode strings.
---
--- **Examples**:
--- * `msg("hello, world")` (Displays a normal message).
--- * `msg("\169000255000This message is green!")` (Displays a green message).
--- * `msg("This text is displayed at the centre@C")` (Displays the message at the centre).
---
--- @param text string The message text to display. Supports RGB colour codes and alignment options.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=msg#cmd
---
--- @see msg2 to send a message to a specified player.
function msg(text) end

--- Sends a message to a specific player (`id`). The message appears in the chat area (bottom left) for that player only.
---
--- **Colouring the Message**:
--- * Prepend the `text` with an RGB colour code: `"\169RRRGGGBBB"`. Use a colour picker to get the RGB values.
---   - Example: `\169000255000` for green. Ensure no space exists between the colour code and the text.
---
--- **Displaying Text at the Centre**:
--- * Append `@C` to display the message at the centre of the screen.
---   - Example: `"This text is displayed at the centre@C"`.
---
--- **UTF-8 Encoding**:
--- * Prefix the text with `"UTF-8:"` to send encoded UTF-8 strings. Use [this tool](https://mothereff.in/utf-8) to encode strings.
---
--- **Examples**:
--- * `msg2(1, "hello, world")` (Displays a normal message to player `1`).
--- * `msg2(3, "\169000255000This message is green!")` (Displays a green message to player `3`).
--- * `msg2(5, "This text is displayed at the centre@C")` (Displays the message at the centre for player `5`).
---
--- @param p player_id The player identifier who receives the message.
--- @param text string The message text to display. Supports RGB colour codes and alignment options.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=msg2#cmd
---
--- @see msg to send a message to everyone.
function msg2(p, text) end

--- Returns information about a dynamic object based on its identifier.
---
--- **Object Properties**:
--- * `"exists"`: Returns `true` if the object exists, `false` otherwise.
--- * `"typename"`: The name of the object's type.
--- * `"type"`: Internal type identifier of the object (reference image [here](https://cs2d.com/img/ref_dynamicobjects.png)).
--- * `"health"`: The current health value of the object.
--- * `"mode"`: The current mode of the object, which can vary depending on the object type.
--- * `"team"`: The team the object belongs to (reference image [here](https://cs2d.com/img/ref_team.png)).
--- * `"player"`: The player who created or owns the object, or for NPCs, the NPC type (reference [here](https://cs2d.com/img/ref_npcs.png)).
--- * `"X"`: The current x-position of the object in pixels.
--- * `"Y"`: The current y-position of the object in pixels.
--- * `"rot"`: The current rotation angle of the object.
--- * `"alpha"`: The alpha transparency value (`0.0` to `1.0`).
--- * `"tilex` and `tiley"`: Tile position (`tx` and `ty`) on the map.
--- * `"countdown"`: The countdown value associated with the object.
--- * `"rootrot"`: The original rotation of the object.
--- * `"idle"`: The idle state for the object.
--- * `"rotvar"`: The rotation variation.
--- * `"target"`: Identifier of the object's current target.
--- * `"upgrade"`: Upgrade value of the object.
--- * `"entity"`: `true` if the object is spawned by an entity, `false` otherwise.
--- * `"entityx` and `entityy"`: Tile coordinates of the entity that spawned the object.
---
--- **Special Notes**:
--- * Dynamic objects are used for various things like NPCs, buildings, and Lua images. Depending on the object type, some values may be used differently or not be used at all.
--- * For image objects, the `imageparam` function can be used to retrieve specific image values.
---
--- **Examples**:
--- * List all dynamic object identifiers:
---   ```lua
---   local object_list = object(0, "table")
---   for _, id in pairs(object_list) do
---       print(id)
---   end
---   ```
---
--- @param obj number The dynamic object identifier or `0` for retrieving all dynamic object identifiers.
--- @param value string The property or value you want to retrieve (e.g., "`exists`", "`health`", etc.).
---
--- @return any property The requested property value or a `table` if `obj` is `0`.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=object#cmd
function object(obj, value) end

--- Returns the identifier of the first object found at the specified tile position (`X`|`Y`) with the given type.
--- If no type is specified, it returns the first object of any type at the given position.
--- Returns `0` if no object is found.
---
--- **Object Types**:
--- * Refer to the [dynamic objects reference image](https://cs2d.com/img/ref_dynamicobjects.png) for a list of types.
---
--- **Special Notes**:
--- * This function searches for objects at tile positions, not pixel positions.
---
--- **Examples**:
--- * Find the first object at tile position (5, 10):
---   ```lua
---   local obj_id = objectat(5, 10)
---   ```
--- * Find the first object of type `3` at tile position (5, 10):
---   ```lua
---   local obj_id = objectat(5, 10, 3)
---   ```
---
--- @param tx number The `X`-coordinate of the tile position.
--- @param ty number The `Y`-coordinate of the tile position.
--- @param type? number The specific object type to search for (optional).
---
--- @return number obj_id The identifier of the found object, or `0` if no object is found.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=objectat#cmd
---
--- @see object to view objects' properties.
function objectat(tx, ty, type) end

--- Returns a value for a specific object type, not an object instance on the map.
--- The values returned are the same for all objects of the given type.
---
--- **Object Types**:
--- * Refer to the [dynamic objects reference image](https://cs2d.com/img/ref_dynamicobjects.png) for a list of types.
---
--- **Parameters**:
--- * `type` (number): The type identifier of the object. Each object type has a unique identifier, but multiple objects may share the same type.
--- * `value` (string): The specific value you want to retrieve for the given object type.
---
--- **Available Values**:
--- * `name`: The localized name of the object (may change depending on server's language setting).
--- * `internalname`: The internal name of the object. This will be an empty string (`""`) if no object exists with this type.
--- * `type`: The subtype/class of the object:
---   - `1`: building
---   - `2`: stuff (mines, portals, etc.)
---   - `3`: NPC unit
---   - `4`: image
--- * `price`: The price of the object (used for buildings).
--- * `health`: The maximum or initial health of the object.
--- * `killmoney`: The amount of money a player receives for killing or destroying the object.
--- * `limit`: The maximum number of buildings of this type a player can build.
--- * `upgradepoints`: The number of hits required to upgrade this building (0 if there is no upgrade).
--- * `upgradeprice`: The price for upgrading the building (calculated as `upgrade_points * 50`; `0` if no upgrade is available).
--- * `upgradeto`: The object type identifier to which this building can be upgraded (`0` if no upgrade is available).
---
--- **Examples**:
--- * To get the localized name of the object with type identifier `1`:
---   ```lua
---   local obj_name = objecttype(1, "name")
---   ```
--- * To get the price of a building with type identifier `1`:
---   ```lua
---   local obj_price = objecttype(1, "price")
---   ```
---
--- ℹ️ **Note**: Do not confuse the identifier of an object instance on the map (which can be retrieved using the [object](lua://object) command) with the object type identifier.
--- These are different: each object instance has a unique identifier, but multiple objects may share the same type identifier.
---
--- @param type number The object type identifier.
---
--- @param value string The specific value to retrieve for the object type.
---
--- @return any property The requested property value.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=objecttype#cmd
---
--- @see object to get properties on a map instanced object.
function objecttype(type, value) end

--- Executes ordinary non-Lua CS2D commands.
--- Everything behind the first semicolon (`;`) will be ignored. This is a security measure in case you're using user input (like chat messages) with this command.
--- You can change this behaviour by setting `Stop-At-Semicolon` to 0, but be cautious when doing so.
---
--- **Important Notes**:
--- * A list of non-Lua CS2D commands is available [here](https://cs2d.com/help.php?cat=all).
--- * In many cases, you can simply include a wrapper to use non-Lua CS2D commands just like Lua functions. Refer to [sys/lua/wrapper.lua](wrapper.lua) `sys/lua/wrapper.lua` for more information.
--- * Be cautious when using this command with user input. Users could manipulate the string to execute their own commands. Always validate user input carefully!
--- * The `parse` function requires a string as its parameter. Concatenating Lua variables with strings can be tricky, especially with commands that have string parameters. Review the examples below for details.
---
--- **Parameters**:
--- * `commands` (string): The CS2D command to execute (formatted as a string).
--- * `stop_at_semicolon` (number): Optional. If set to 1, everything after the semicolon (`;`) will be ignored.
---
--- **Examples**:
--- * Change the server name using Lua (note the usage of single quotes and double quotes for different strings):
---   ```lua
---   parse('sv_name "Test Server"')
---   ```
--- * Using a number variable with `parse`:
---   ```lua
---   local banid = 1
---   parse('banusgn '..banid)
---   ```
--- * Using a string variable with `parse` (additional quotes are required because the player name is a string):
---   ```lua
---   local player_name = "Player"
---   parse('banname "'..player_name..'"')
---   ```
--- * Using multiple variables with `parse`:
---   ```lua
---   local player = 1
---   local xpos = 5
---   local ypos = 3
---   parse('setpos '..player..' '..xpos..' '..ypos)
---   ```
---
--- The resulting string in the last example will be `'setpos 1 5 3'`, which works as a CS2D command.
---
--- **Additional Tips**:
--- * If you're having trouble with concatenation, use `print()` to check the resulting string before passing it to `parse`.
--- * You can prefix the text with `"UTF-8:"` to pass encoded UTF-8 strings to this function. Use [this tool](https://mothereff.in/utf-8) to encode strings.
---
--- **Security Warning**:
--- * Do not set `Stop-At-Semicolon` to 0 when parsing user input, as this may allow users to execute unauthorized commands or manipulate parameters.
---
--- @param commands console_command The CS2D command to execute (as a string).
--- @param stop_at_semicolon? number Optional. Set to 1 to stop at semicolons, preventing malicious input manipulation.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=parse#cmd
function parse(commands, stop_at_semicolon) end

--- Returns a value of a player or a table of players. Returns `false` if the specified player, value, or table does not exist.
---
--- **Values and Tables Which Can Be Requested**:
---
--- * **Identity & Logins & Language**
---   * `exists`: `boolean`, `true` if player with this identifier exists, `false` otherwise.
---   * `name`: Name of the player.
---   * `ip`: IP address of the player or "`0.0.0.0`" for bots/server.
---   * `port`: Port of the player.
---   * `usgn`: Unreal Software Gaming Network / UnrealSoftware.de user identifier (`0` if not logged in).
---   * `usgnname`: Unreal Software Gaming Network / UnrealSoftware.de username (`""` if not logged in).
---   * `steamid`: Steam identifier as a string (`"0"` if not logged in).
---   * `steamname`: Steam username (`""` if not logged in or if name retrieval failed).
---   * `bot`: `boolean`, `true` if player is a bot, `false` otherwise.
---   * `rcon`: `boolean`, `true` if logged in with correct RCon password, `false` otherwise.
---   * `language`: Current language of the player as a string.
---   * `language_iso`: Current language of the player as an ISO code string.
---
--- * **Team & Appearance**
---   * `team`: `0` for spectators, `1` for terrorists, `2` for counter-terrorists, `3` for VIP (CT).
---   * `favteam`: Favourite team if preferred team joining fails (e.g., in Zombies! mode).
---   * `look`: Player look (`0`-`3`) / selected faction skin.
---   * `sprayname`: Name of spray logo file.
---   * `spraycolor`: Colour of spray logo (0-based index, reference in options menu).
---
--- * **Mouse Position & Screen/Setup**
---   * `mousex`, `mousey`: Player mouse x and y screen positions (alive players only, `-1` if not available).
---   * `mousemapx`, `mousemapy`: Mouse positions on the map (alive players only, `-1` if not available).
---   * `mousedist`: Distance between player and mouse (alive players only, `-1` if not available).
---   * `screenw`, `screenh`: Game screen dimensions in pixels (excluding borders).
---   * `widescreen`, `windowed`: Game running mode: widescreen or windowed (`0`/`1`).
---   * `micsupport`: `0`/`1`, indicates microphone support.
---
--- * **Position**
---   * `X`, `Y`: Current `X` and `X` positions on the map (in pixels).
---   * `tilex`, `tiley`: Current `X` and `Y` positions on the map (in tiles).
---   * `rot`: Current rotation angle.
---
--- * **Stats**
---   * `health`, `maxhealth`: Current and maximum health values.
---   * `armour`: Armour value (see extended details for specific armour types).
---     - `0`-`200`: Regular Kevlar(+Helm) points (damage reduction, decreases on hit).
---     - `201`-`206`: Specialized armours with unique damage reductions and effects.
---   * `money`: Money value.
---   * `score`, `deaths`, `teamkills`: Player stats such as score, deaths, and team kills.
---   * `hostagekills`, `teambuildingkills`: Hostages and teammate buildings killed.
---   * `mvp`: Rounds as MVP.
---   * `assists`: Number of kill assists.
---   * `ping`: Current ping in milliseconds.
---   * `idle`: Idle time in seconds (int).
---   * `speedmod`: Speed modifier value (`0` = normal, `<0` = slower, `>0` = faster).
---   * `spectating`: Identifier of the player currently spectated.
---   * `ai_flash`: Flashbang duration for bots (seconds, float, `0` if not flashed).
---
--- * **Equipment**
---   * `weapontype`, `weaponmode`: Type and mode of the current weapon.
---   * `nightvision`, `defusekit`, `gasmask`: Equipment possession as `boolean` values.
---   * `bomb`, `flag`: Possession of bomb or flag as `boolean` values.
---
---   ℹ️ **Notes**: Use `playerweapons` and `playerammo` commands to retrieve owned weapons and ammo details.
---
--- * **Actions & Voting**
---   * `reloading`: `boolean`, `true` if reloading.
---   * `process`: Current process state (internal ID for reloading/planting/defusing).
---     - Values from `1`-`6` represent specific states (e.g., `1` = Start bomb planting).
---   * `votekick`, `votemap`: Voted kick player ID or map name (`0` or empty string if no vote).
---
--- * **Tables**
---   * `player(0, "table")`: All player identifiers.
---   * `player(0, "tableliving")`: All living player identifiers.
---   * `player(0, "team1")`, `player(0, "team2")`: Terrorist and counter-terrorist identifiers.
---   * `player(0, "team1living")`, `player(0, "team2living")`: Living terrorist and counter-terrorist identifiers.
---
--- **Examples**:
--- * List player names using a table:
---   ```lua
---   local playerlist = player(0, "table")
---   for _, id in pairs(playerlist) do
---       print(player(id, "name"))
---   end
---   ```
---
--- @param p player_id Player identifier or `0` to retrieve a table of players.
--- @param value string The requested property or table type.
---
--- @return any property Requested property value, `false` if invalid.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=player#cmd
function player(p, value) end

--- Returns how much ammo the specified player has left in the specified weapon.
---
--- This function returns two values:
---   - The ammo currently loaded into the weapon.
---   - The spare ammo for reloading.
---
--- **Important Notes**:
---   * If the player does not exist or the player does not carry the weapon of the specified type, CS2D will return a boolean `false` (single value).
---   * The ammo values the server has for other network players are just an approximation. Players might actually have LESS ammo than returned by this command - but never more. This can be caused by bad network conditions like lag and packet loss.
---   * The values returned are guaranteed to be accurate for the local player (when hosting a game) and for bots.
---
--- **Parameters**:
---   * `p` (number): The player identifier of the player whose ammo is being queried.
---   * `itemType` (number): The item type identifier of the weapon being checked. A list of item type identifiers is available [here](https://cs2d.com/img/ref_items.png).
---
--- **Sample**: Get the ammo count of a player's weapon:
---   ```lua
---   local weaponType = player(pID, "weapontype")
---   local ammoIn, ammo = playerammo(pID, weaponType)
---   msg(player(pID, "name") .. " ammo: " .. ammoIn .. "|" .. ammo)
---   ```
---   This example will send a message displaying the player's name and their current ammo in the weapon, as well as spare ammo.
---
--- **Security Warning**:
---   * Be careful when using this function with user input or in an environment with unreliable network conditions, as the values may be inaccurate.
---
--- @param p player_id The player identifier.
--- @param itemType number The item type identifier of the weapon.
---
--- @return number ammoIn, number ammo The ammo currently loaded into the weapon and the spare ammo for reloading.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=playerammo#cmd
function playerammo(p, itemType) end

--- Returns a Lua table with all equippable weapon/item TYPES a player carries.
---
--- **Important Notes**:
--- * Items like money, health, and ammo are automatically used when collected. They only modify related values (e.g., player money) and never appear in the list of carried items.
--- * This function returns item TYPES, not item instance identifiers. Use [playerammo](lua://playerammo) to retrieve ammo values for specific carried weapons.
--- * The returned table includes only items equippable in hands and visible in weapon selection. Special items like flags, gas masks, or armours are excluded.
---   Use the [player](lua://player) command for these items with the relevant parameter.
---
--- **Item Names and Type Identifiers**:
--- Refer to the [item reference image](https://cs2d.com/img/ref_items.png) for a complete list.
---
--- **Example**:
--- * List items carried by player 1:
---   ```lua
---   local item_list = playerweapons(1)
---   for _, id in pairs(item_list) do
---       print(itemtype(id, "name"))
---   end
---   ```
---
--- @param p player_id The player identifier whose items are being queried.
---
--- @return table list A table of all equippable item types the player carries.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=playerweapons#cmd
---
--- @see playerammo to retrieve ammo values for specific carried weapons.
--- @see player to receive special items a player may carry.
function playerweapons(p) end

--- Prints a string to the console.
---
--- **Colouring the Message**:
--- * Start `text` with an RGB colour code (`"\169RRRGGGBBB"`) to change its colour.
---   - Example: `"\169255000000This message is red!"` (displays a red message).
---   - Use [this colour picker](https://www.google.com/search?q=colourpicker) to get the RGB values.
---
--- **UTF-8 Encoding**:
--- * Prefix `text` with `"UTF-8:"` to pass encoded UTF-8 strings to this function.
---   - Use [this tool](https://mothereff.in/utf-8) to encode strings.
---
--- **Examples**:
--- * Show a text in the console:
---   ```lua
---   print("hello, world")
---   ```
--- * Show a red text in the console (no space after the colour code):
---   ```lua
---   print("\169255000000This message is red!")
---   ```
---
--- @param text string The text to display in the console. Supports colour codes and UTF-8 encoding.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=print#cmd
---
--- @see msg to print messages to the chat instead.
--- @see msg2 to print messages to the chat instead.
function print(text) end

--- Returns a value of a projectile (e.g., grenades and objects launched by weapons visible for multiple frames).
--- Regular bullets are NOT considered projectiles.
---
--- **Available Values**:
--- * `exists`: `boolean`, `true` if the projectile exists, `false` otherwise.
--- * `type`: Internal type identifier (matches the weapon's corresponding identifier).
--- * `X`, `Y`: Current `X` and `Y` positions on the map (in pixels).
--- * `dir`: Current flight direction.
--- * `rot`: Current rotation angle (used for visual effects only).
--- * `flydist`: Distance (in pixels) the projectile will fly (applies to flying projectiles).
--- * `time`: Countdown (in seconds) until the projectile is removed (applies to ground projectiles).
---
--- **Important Notes**:
--- * Projectiles are managed in two lists:
---   - "flying": Contains projectiles currently in flight.
---   - "ground": Contains idle projectiles on the ground (do not move even if their values suggest otherwise).
--- * Server projectile values might differ from client values due to internet lag and latency.
--- * There is no `projectile(0, "table")` command. Use (projectilelist)[lua://projectilelist] instead.
--- * Projectiles can have duplicate identifiers because each player has their own identifier space. Always specify both `projectileID` and `p` to uniquely identify a projectile.
---
--- **Example**:
--- * Retrieve and print a projectile's type:
---   ```lua
---   local projType = projectile(1, 2, "type")
---   print("Projectile Type: " .. projType)
---   ```
---
--- @param projectileID number Identifier of the projectile.
--- @param p player_id Identifier of the player associated with the projectile.
--- @param value string The property to retrieve (e.g., `"exists"`, `"x"`, `"type"`).
---
--- @return any property The requested property value or `nil` if the projectile does not exist.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=projectile#cmd
---
--- @see projectilelist for a list of projectiles.
function projectile(projectileID, p, value) end

--- Returns a value of a projectile (e.g., grenades and objects launched by weapons visible for multiple frames).
--- Regular bullets are NOT considered projectiles.
---
--- **Available Values**:
--- * `exists`: `boolean`, `true` if the projectile exists, `false` otherwise.
--- * `type`: Internal type identifier (matches the weapon's corresponding identifier).
--- * `X`, `Y`: Current x and y positions on the map (in pixels).
--- * `dir`: Current flight direction.
--- * `rot`: Current rotation angle (used for visual effects only).
--- * `flydist`: Distance (in pixels) the projectile will fly (applies to flying projectiles).
--- * `time`: Countdown (in seconds) until the projectile is removed (applies to ground projectiles).
---
--- **Important Notes**:
--- * Projectiles are managed in two lists:
---   - "flying": Contains projectiles currently in flight.
---   - "ground": Contains idle projectiles on the ground (do not move even if their values suggest otherwise).
--- * Server projectile values might differ from client values due to internet lag and latency.
--- * There is no `projectile(0, "table")` command. Use `projectilelist` instead.
--- * Projectiles can have duplicate identifiers because each player has their own identifier space. Always specify both `projectileID` and `p` to uniquely identify a projectile.
---
--- **Examples**:
--- * Retrieve and print a projectile's type:
---   ```lua
---   local projType = projectile(1, 2, "type")
---   print("Projectile Type: " .. projType)
---   ```
---
--- @param projectileID number Identifier of the projectile.
--- @param p player_id Identifier of the player associated with the projectile.
--- @param value string The property to retrieve (e.g., "exists", "x", "type").
---
--- @return any property The requested property value or `nil` if the projectile does not exist.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=projectile#cmd
function projectile(projectileID, p, value) end

--- Returns a list (*Lua table*) containing projectile key data (identifiers and parent player) of all flying or ground projectiles.
--- You can also limit the output to projectiles of a specific player (`player=0` lists projectiles of all players).
---
--- **Parameters**:
--- * `list` (number): `0` (default) for flying projectiles or `1` for ground projectiles.
--- * `p` (number): Player identifier (*optional*). Defaults to `0` to include projectiles from all players.
---
--- **Important Notes**:
--- * The resulting `list` is a Lua table with one sub-table per projectile. Each sub-table contains:
---   - `id`: The projectile identifier.
---   - `player`: The player who launched the projectile.
--- * There can be multiple projectiles with the same identifier, as each player has their own identifier space. Use both `id` and `player` for unique identification.
---
--- **Example**:
--- * Iterate over a list of all flying projectiles:
---   ```lua
---   local list = projectilelist(0, 0)
---   for _, p in pairs(list) do
---       print("Projectile with ID " .. p.id .. " from player " .. p.player .. " - Type: " .. projectile(p.id, p.player, "type"))
---   end
---   ```
---
--- @param list number Specify `0` for flying projectiles or `1` for ground projectiles.
--- @param p? number Player identifier to filter projectiles (optional, defaults to `0`).
---
--- @return table list A table of projectiles, each containing `id` and `player` fields.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=projectilelist#cmd
function projectilelist(list, p) end

--- Returns the tile `X` and `Y` position of a random entity of a specific type, or `-100, -100` if none is found.
--- Optionally filter by AI state or `int0` value.
---
--- **Parameters**:
--- * `type` (number): The entity type to search for.
--- * `ai_state` (number): AI state to filter entities (`-1` to ignore, optional).
--- * `int0` (number): `int0` value to filter entities (`-1` to ignore, optional).
---
--- **Important Notes**:
--- * This command is useful for AI scripts (e.g., bots).
--- * The AI state of an entity can be modified with [setentityaistate](lua://setentityaistate).
--- * Use `int0` to find specific entities like `Info_CTF_Flag` for a team or `Info_Dom_Point` with a specific state.
--- * Does NOT work with `Env_Decal` entities.
---
--- **Example**:
--- * Find a random terrorist spawn point:
---   ```lua
---   local x, y = randomentity(0)
---   print("Terrorist spawn at: " .. x .. ", " .. y)
---   ```
---
--- @param type number The entity type to search for.
--- @param ai_state? number AI state to filter by (`-1` to ignore, optional).
--- @param int0? number `int0` value to filter by (`-1` to ignore, optional).
---
--- @return number tileX, number tileY The tile `X` and `Y` positions of the entity, or `-100, -100` if none is found.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=randomentity#cmd
---
--- @see entity to view an entity's properties.
--- @see entitylist to retrieve the list of entities.
function randomentity(type, ai_state, int0) end

--- Returns the tile `X` and `Y` position of a random living and unused hostage.
--- Returns `-100, -100` if no hostage is found.
---
--- **Parameters**:
--- * `unused` (number): Set to `0` to include used hostages, or `1` to exclude them (default).
---
--- **Important Notes**:
--- * The returned position is in tiles, not pixels.
--- * Returns two values: `X` and `Y`.
---
--- **Example**:
--- * Get the position of a random hostage:
---   ```lua
---   local x, y = randomhostage(1)
---   print("Hostage at: " .. x .. ", " .. y)
---   ```
---
--- @param unused number Set to `0` to include used hostages or `1` to exclude them.
---
--- @return number tileX, number tileY POSITION The tile `X` and `Y` positions of the hostage, or `-100, -100` if none is found.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=randomhostage#cmd
function randomhostage(unused) end

--- Removes all Lua key binds added via [addbind](lua://addbind).
--- This disables all additional network traffic caused by key binds, and the key-hook will no longer be called.
---
--- **Important Notes**:
--- * Use [removebind](lua://removebind) to remove specific binds instead of all.
--- * Since key binds cause additional network traffic, it's recommended to remove any unused binds.
---
--- **Example**:
--- * Remove all binds:
---   ```lua
---   removeallbinds()
---   ```
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=removeallbinds#cmd
---
--- @see addbind to add a bind.
--- @see removebind to remove a bind.
function removeallbinds() end

--- Removes a specific Lua key bind. The key must have been added beforehand with [addbind](lua://addbind).
---
--- **Important Notes**:
--- * Removing or adding key binds causes additional network traffic. If the same key bind will be required again, consider keeping it instead of removing and re-adding it.
--- * Use [removeallbinds](lua://removeallbinds) to remove all binds at once if necessary.
---
--- **Example**:
--- * Remove a specific key bind:
---   ```lua
---   removebind("F1")
---   ```
---
--- **Parameters**:
--- @param key string The name of the key to remove.
--- > Valid key names:
--- > * Numeric keys: `'0'`, `'1'`, ... `'9'`
--- > * Alphabetic keys: `'A'`, `'B'`, ... `'Z'`
--- > * Function keys: `"F1"`, `"F2"`, ... `"F12"`
--- > * Mouse: `"mouse1"` (left click), `"mouse2"` (right click), `"mouse3"` (middle click), `"mwheelup"`, `"mwheeldown"` (scrolling)
--- > * Special/Modifier keys: `"leftshift"`, `"rightshift"`, `"leftctrl"`, `"rightctrl"`, `"leftalt"`, `"rightalt"`, `"leftsys"`, `"rightsys"`
--- > * Arrow keys: `"leftarrow"`, `"rightarrow"`, `"uparrow"`, `"downarrow"`
--- > * Others: `"backspace"`, `"tab"`, `"clear"`, `"enter"`, `"escape"`, `"space"`, `"pgup"`, `"pgdn"`, `"end"`, `"home"`, `"select"`, `"print"`, `"execute"`, `"screen"`, `"ins"`, `"del"`
--- > * Numpad/keypad: Same as above with `kp_` prefix, e.g., `"kp_leftarrow"`, `"kp_home"`, `"kp_ins"`, `"kp_5"` for the centre button.
---
--- @return number success `1` if the bind was removed, `0` if the bind did not exist.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=removebind#cmd
---
--- @see addbind to add a bind.
--- @see removeallbinds to remove all binds.
function removebind(key) end

--- Requests data from a single player client or all clients.
--- The [reqcld](lua://reqcld) function requests specific types of data from a player client, identified by their ID (`p`).
---
--- **Modes**:
--- * `0`: Cursor position on screen (in pixels, scaled based on `mp_hudscale`).
---   - **Deprecated**: Use `player` with "mousex"/"mousey" instead.
--- * `1`: Map scrolling offset (in pixels).
--- * `2`: Absolute cursor position on the map (in pixels, not influenced by `mp_hudscale`).
---   - **Deprecated**: Use `player` with "mousemapx"/"mousemapy" instead.
--- * `3`: Advanced light engine state (`1` if enabled, `0` otherwise; second value is always `0`).
--- * `4`: File load status and checksum.
---   - Returns `1` if the file (specified with `param`) is loaded, `0` otherwise.
---   - If the file is under `gfx/` or `sfx/`, also returns the checksum as provided by `checksumfile`.
--- * `5`: Mod information.
--- * `6`: 3D rendering state (`1` if enabled, `0` otherwise; second value is always `0`).
---
--- **Parameters**:
--- * `p` (number): Player ID (`0` for all players).
--- * `mode` (number): Mode specifying the type of data to request.
--- * `param` (string): Optional. Required for certain modes (e.g., mode `4` for file paths).
---
--- **Important Notes**:
--- * The requested data is sent over the network and will be received with a delay. Use the `clientdata` hook to handle the incoming data.
--- * Modes `0` and `2` are deprecated. Consider using the [player](lua://player) command to avoid additional network traffic.
--- * This function uses reliable UDP packets. Frequent usage might cause lags or ping spikes.
--- * All values sent by the client can potentially be manipulated by external software. Validate client-provided data accordingly.
---
--- **Examples**:
--- * Request the cursor position on the map:
---   ```lua
---   reqcld(1, 2)
---   ```
--- * Check if a specific file is loaded:
---   ```lua
---   reqcld(1, 4, "gfx/sprites/example.png")
---   ```
---
--- @param p player_id Player ID (`0` for all players).
--- @param mode number Mode specifying the data type to request.
--- @param param? string Optional parameter required for some modes.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=reqcld#cmd
---
--- @see player to retrieve immediate data.
function reqcld(p, mode, param) end

--- Sends an HTTP request to a specified URL and path.
---
--- The [reqhttp](lua://reqhttp) function retrieves data from web pages or web services, with the response handled via the `httpdata` hook.
---
--- **Parameters**:
--- * `url` (string): The domain name or IP address (e.g., `"cs2d.com"`).
--- * `path` (string): The relative path of the resource, starting with a backslash (e.g., `"/index.php"`).
--- * `mode` (number): Specifies the response format:
---   - `0`: Plain string.
---   - `1`: Byte array (Lua table with numbers).
---
--- **Important Notes**:
--- * The response data is received with a delay, as it is sent over the network. Use the `httpdata` hook to process it.
--- * The function returns a unique identifier for the request, which is passed to the `httpdata` hook for matching requests with responses.
--- * Excessive or large HTTP requests can negatively impact server performance and cause ping spikes. Use sparingly.
---
--- **Example**:
--- * Request the homepage of cs2d.com:
---   ```lua
---   reqhttp("cs2d.com", "/index.php", 0)
---   ```
---
--- @param url string The domain name or IP address.
--- @param path string The relative path of the resource.
--- @param mode number The response format (`0` for string, `1` for byte array).
---
--- @return number req_id The unique request identifier.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=reqhttp#cmd
function reqhttp(url, path, mode) end

--- Sets the AI state value of an entity at a specified tile position.
---
--- The AI state is automatically reset to `0` at the start of each round. This value is used primarily in AI scripts (e.g., for bots).
---
--- **Parameters**:
--- * `tx` (number): Tile `X`-position of the entity.
--- * `ty` (number): Tile `Y`-position of the entity.
--- * `ai` (number): The AI state value to set (customizable).
---
--- **Important Notes**:
--- * Avoid using this command in server or map scripts, as it is designed for AI scripts. Misuse can cause issues with bots.
--- * Common use cases include marking bomb spots or areas that bots have already checked.
--- * Works well with [randomentity](lua://randomentity) for AI-based logic.
---
--- **Example**:
--- * Set AI state for a tile:
---   ```lua
---   setentityaistate(5, 10, 1)
---   ```
---
--- @param tx number The tile `X`-position of the entity.
--- @param ty number The tile `Y`-position of the entity.
--- @param ai number The AI state value to assign.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=setentityaistate#cmd
---
--- @see randomentity to retrieve a random entity.
function setentityaistate(tx, ty, ai) end

--- Enables or disables a hook.
---
--- **Parameters**:
--- * `hook` (string): The name of the hook to enable or disable.
--- * `state` (number): `1` to enable, `0` to disable.
---
--- **Examples**:
--- * Disable the "clientdata" hook:
---   ```lua
---   sethookstate("clientdata", 0)
---   ```
--- * Enable the "join" hook:
---   ```lua
---   sethookstate("join", 1)
---   ```
---
--- @param hook string The name of the hook.
--- @param state number `1` to enable, `0` to disable.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=sethookstate#cmd
---
--- @see addhook to add a hook.
--- @see freehook to free the hook.
function sethookstate(hook, state) end

--- Returns stats for a U.S.G.N. account identifier.
---
--- Retrieves various statistics for a specific U.S.G.N. identifier, such as rank, kills, and time spent on the server.
---
--- **Available Values**:
--- * `exists`: `boolean`, `true` if stats for the U.S.G.N. identifier are available, `false` otherwise.
--- * `rank`: Current rank of the player on the server (`1` for the best, `0` if unranked).
--- * `killsperdeath`: Kills per death ratio (calculated as `kills / deaths`).
--- * `score`: Total score (sum of map mission goal score and frags).
--- * `frags`: Number of kills.
--- * `deaths`: Number of deaths.
--- * `secs`: Time spent on the server in seconds (only counts time while in a team, excludes time as spectator).
--- * `mvp`: Number of rounds where the player was the most valuable player.
--- * `assists`: Number of kill assists.
---
--- **Important Notes**:
--- * Returns `false` if stats are not available for the specified U.S.G.N. identifier or if invalid parameters are provided.
--- * Similar stats may be available using [steamstats](lua://steamstats) for Steam identifiers instead of U.S.G.N. identifiers.
--- * Stats availability depends on the player's login behaviour.
---
--- **Example**:
--- * Retrieve the kills per death ratio for a U.S.G.N. account:
---   ```lua
---   local kdr = stats(12345, "killsperdeath")
---   print("Kills per death: " .. kdr)
---   ```
---
--- @param usgn_id number The U.S.G.N. identifier.
--- @param value string The stat to retrieve (e.g., "killsperdeath", "score").
---
--- @return any stat The requested stat value, or `false` if not available.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=stats#cmd
---
--- @see steamstats for Steam stats.
function stats(usgn_id, value) end

--- Returns stats for a Steam account identifier.
---
--- Retrieves various statistics for a specific Steam identifier, such as rank, kills, and time spent on the server.
---
--- **Available Values**:
--- * `"exists"`: `boolean`, `true` if stats for the Steam identifier are available, `false` otherwise.
--- * `"rank"`: Current rank of the player on the server (`1` for the best, `0` if unranked).
--- * `"killsperdeath"`: Kills per death ratio (calculated as `kills / deaths`).
--- * `"score"`: Total score (sum of map mission goal score and frags).
--- * `"frags"`: Number of kills.
--- * `"deaths"`: Number of deaths.
--- * `"secs"`: Time spent on the server in seconds (only counts time while in a team, excludes time as spectator).
--- * `"mvp"`: Number of rounds where the player was the most valuable player.
--- * `"assists"`: Number of kill assists.
---
--- **Important Notes**:
--- * Returns `false` if stats are not available for the specified Steam identifier or if invalid parameters are provided.
--- * Similar stats may be available using [stats](lua://stats) for U.S.G.N. identifiers instead of Steam identifiers.
--- * Stats availability depends on the player's login behaviour.
---
--- **Example**:
--- * Retrieve the total score for a Steam account:
---   ```lua
---   local score = steamstats("STEAM_0:1:12345678", "score")
---   print("Total score: " .. score)
---   ```
---
--- @param steam_id string The Steam identifier (as a string).
--- @param value string The stat to retrieve (e.g., "killsperdeath", "score").
---
--- @return any stat The requested stat value, or `false` if not available.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=steamstats#cmd
---
--- @see stats for U.S.G.N. stats.
function steamstats(steam_id, value) end

--- Returns a value of the tile at the specified tile position (`X`|`Y`).
---
--- **Available Values**:
--- * `"frame"`: Tile frame number in the tileset currently applied to this tile.
--- * `"property"`: Tile type, representing the material/behaviour of the tile:
---   - `0`: Tile without sound.
---   - `1`: Wall.
---   - `2`: Obstacle.
---   - `3`: Wall without shadow.
---   - `4`: Obstacle without shadow.
---   - `5`: Floor wall.
---   - `10`: Dirt floor.
---   - `11`: Snow floor.
---   - `12`: Step floor.
---   - `13`: Tile floor.
---   - `14`: Wade floor.
---   - `15`: Metal floor.
---   - `16`: Wood floor.
---   - `50`: Deadly.
---   - `51`: Toxic deadly.
---   - `52`: Explosion deadly.
---   - `53`: Abyss deadly.
--- * `"walkable"`: `boolean`, `true` if walkable, `false` otherwise.
--- * `"deadly"`: `boolean`, `true` if deadly, `false` otherwise.
--- * `"wall"`: `boolean`, `true` if wall, `false` otherwise.
--- * `"obstacle"`: `boolean`, `true` if obstacle, `false` otherwise.
--- * `"entity"`: `number`, entity type at this position (`0` if none, `>0` otherwise).
--- * `"hascustomframe"`: `boolean`, `true` if the frame has been changed with `settile`, `false` otherwise.
--- * `"originalframe"`: Tile frame number originally assigned (unaltered map) or currently assigned if not changed.
--- * `"rot"`: Tile rotation in degrees (`0` if not rotated; `90`, `180`, or `270` otherwise).
--- * `"blend"`: Tile blending frame, or `false` if not blended.
--- * `"color"`: `table`, Lua table with `r`, `g`, `b` values of the tile, or `false` if no custom colour is set (default is `r=255`, `g=255`, `b=255`).
--- * `"brightness"`: Custom brightness level (`0, 10, 20, ..., 100`), or `false` if not set (default is `100`).
---
--- **Important Notes**:
--- * Returns `false` if the specified tile position is outside the map boundaries.
--- * Use the `map` command to determine the map size.
---
--- **Examples**:
--- * Check if a tile is walkable:
---   ```lua
---   local isWalkable = tile(5, 10, "walkable")
---   print("Tile walkable: " .. tostring(isWalkable))
---   ```
--- * Get the colour of a tile:
---   ```lua
---   local colour = tile(3, 6, "color")
---
---   if colour then
---       print("Tile colour: R=" .. colour.r .. ", G=" .. colour.g .. ", B=" .. colour.b)
---   end
---   ```
---
--- @param tx number Tile `X`-position.
--- @param ty number Tile `Y`-position.
--- @param value string The property to retrieve (e.g., `"frame"`, `"walkable"`).
---
--- @return any property The requested property value, or `false` if the tile position is invalid.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tile#cmd
---
--- @see tileproperty to view a tile frame property.
function tile(tx, ty, value) end

--- Gets the property value for the specified tile frame in the tileset of the current map.
---
--- **Available Property Values**:
--- * `0`: Tile without sound.
--- * `1`: Wall.
--- * `2`: Obstacle.
--- * `3`: Wall without shadow.
--- * `4`: Obstacle without shadow.
--- * `5`: Floor wall.
--- * `10`: Dirt floor.
--- * `11`: Snow floor.
--- * `12`: Step floor.
--- * `13`: Tile floor.
--- * `14`: Wade floor.
--- * `15`: Metal floor.
--- * `16`: Wood floor.
--- * `50`: Deadly.
--- * `51`: Toxic deadly.
--- * `52`: Explosion deadly.
--- * `53`: Abyss deadly.
---
--- **Important Notes**:
--- * Returns `0` if the specified `tileFrame` is not part of the tileset.
--- * Use `map("tilecount")` to get the total number of tiles in the tileset.
---
--- **Examples**:
--- * Check the property of a specific tile frame:
---   ```lua
---   local property = tileproperty(25)
---   print("Tile frame 25 property: " .. property)
---   ```
---
--- @param tileFrame number The tile frame number in the tileset.
---
--- @return number property The property value of the tile frame.
--- @nodiscard
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tileproperty#cmd
function tileproperty(tileFrame) end

--- Creates a timer that will call a specified Lua function after a given interval in milliseconds.
---
--- The timer can optionally pass a string parameter to the function and can be set to repeat a specific number of times.
--- Using `0` or a negative count value makes the timer repeat indefinitely until removed via [freetimer](lua://freetimer).
---
--- **Important Notes**:
--- * The `callback` function must exist; otherwise, an "`attempt to call a nil value`" Lua error will occur.
--- * CS2D's single-threaded nature and FPS lock limit timer precision. At `60` FPS, timer precision is `~16.6` ms.
--- * Timer imprecision may accumulate when repeatedly executed (`count <= 0` or `count > 1`).
--- * Creating many high-frequency timers can degrade performance, especially with complex functions. Use [freetimer](lua://freetimer) to clean up unused timers.
--- * CS2D does not check for duplicate timers, so identical timers may be created if this function is called multiple times with the same parameters.
---
--- **Examples**:
--- * Execute a function once with a `5`-second delay:
---   ```lua
---   timer(5000, "dothislater")
---   function dothislater()
---       msg("This text is displayed 5 seconds after using timer")
---   end
---   ```
--- * Execute a function 10 times with a `1`-second delay:
---   ```lua
---   timer(1000, "tick", "", 10)
---   function tick()
---       msg("*tick*")
---   end
---   ```
--- * Delayed execution with a parameter:
---   ```lua
---   timer(3000, "delayedtext", "Hello, this is delayed.")
---   function delayedtext(text)
---       msg(text)
---   end
---   ```
--- * Use [parse](lua://parse) to execute CS2D commands with delay:
---   ```lua
---   timer(1000, "parse", 'sv_msg "Server shutdown in 5 secs"')
---   timer(2000, "parse", 'sv_msg "... 4 secs"')
---   timer(3000, "parse", 'sv_msg "... 3 secs"')
---   timer(4000, "parse", 'sv_msg "... 1 sec"')
---   timer(5000, "parse", 'disconnect')
---   ```
---
--- @param interval number Time in milliseconds between function calls (1000 ms = 1 second).
--- @param callback string The name of the Lua function to call. Must exist as a string matching the function name.
--- @param param? string Optional. A parameter string to pass to the callback function.
--- @param count? number Optional. Number of times to call the function. Defaults to `1`. Use `0` or a negative value for infinite calls.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=timer#cmd
---
--- @see freetimer to free a timer.
function timer(interval, callback, param, count) end

--- Creates an alpha fade tween to adjust the transparency of an image over a specified time.
---
--- The function gradually changes the alpha transparency of the image to the given value within the specified duration.
---
--- **Important Notes**:
--- * Alpha values outside the range `0.0` to `1.0` may cause unintended behaviour.
--- * Time is specified in milliseconds.
---
--- **Examples**:
--- * Fade an image to `50%` transparency over `2` seconds:
---   ```lua
---   tween_alpha(1, 2000, 0.5)
---   ```
--- * Make an image fully visible over `1` second:
---   ```lua
---   tween_alpha(2, 1000, 1.0)
---   ```
---
--- @param img_id number The identifier of the image to apply the fade effect.
--- @param milliseconds number Duration of the fade effect in milliseconds (1000 ms = 1 second).
--- @param alpha number The target transparency value. Ranges from `0.0` (completely invisible) to `1.0` (fully opaque).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_alpha#cmd
---
--- @see imagealpha to set an image's alpha instantly.
function tween_alpha(img_id, milliseconds, alpha) end

--- Creates an animation tween to change the frame of a spritesheet image over time.
---
--- The animation mode controls how the frames are displayed during the tween.
---
--- **Animation Modes**:
--- * `0`: Loop Forward (play from the current frame to the last frame, then restart from the first frame).
--- * `1`: Loop Backward (play from the current frame to the first frame, then restart from the last frame).
--- * `2`: Ping Pong Forward (play forward to the last frame, then backward to the first frame, repeatedly).
--- * `3`: Ping Pong Backward (play backward to the first frame, then forward to the last frame, repeatedly).
--- * `4`: Random (display a random frame every `milliseconds`).
---
--- **Important Notes**:
--- * The image must be a spritesheet with multiple frames loaded using the [image](lua://image) command.
--- * The tween stays active until another [tween_animate](lua://tween_animate) or [tween_frame](lua://tween_frame) is applied to the same image.
--- * Time is specified in milliseconds (`1000` ms = `1` second).
---
--- **Examples**:
--- * Loop an animation forward over 0.2 seconds:
---   ```lua
---   tween_animate(1, 200, 0)
---   ```
--- * Play an animation in random mode over 0.5 seconds:
---   ```lua
---   tween_animate(2, 500, 4)
---   ```
---
--- @param img_id number The identifier of the image to animate.
--- @param milliseconds number Duration each frame is displayed, in milliseconds.
--- @param mode number The animation mode (`0`-`4`).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_animate#cmd
---
--- @see imageframe to change the frame of an image instantly.
--- @see tween_frame to change an image's frame gradually.
function tween_animate(img_id, milliseconds, mode) end

--- Creates a colour fade tween to change the colour of an image over time.
---
--- The image will transition to the specified RGB colour values within the given duration.
---
--- **Important Notes**:
--- * RGB values range from `0` (dark) to `255` (bright).
--- * Time is specified in milliseconds (`1000` ms = `1` second).
---
--- **Example**:
--- * Fade an image to red over `3` seconds:
---   ```lua
---   tween_color(1, 3000, 255, 0, 0)
---   ```
---
--- @param img_id number The identifier of the image to adjust.
--- @param milliseconds number Duration of the colour transition in milliseconds.
--- @param r number Red component (`0`-`255`).
--- @param g number Green component (`0`-`255`).
--- @param b number Blue component (`0`-`255`).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_color#cmd
---
--- @see imagecolor to change an image's colour instantly.
function tween_color(img_id, milliseconds, r, g, b) end

--- Creates a frame animation tween to change the frame of a spritesheet image over time.
---
--- The image will transition to the specified frame within the given duration.
---
--- **Important Notes**:
--- * The image must be a spritesheet with multiple frames loaded using the [image](lua://image) command.
--- * Frame indices are `0`-based (e.g., frame `0` is the first frame).
--- * Time is specified in milliseconds (`1000` ms = `1` second).
---
--- **Example**:
--- * Change an image to frame `5` over `2` seconds:
---   ```lua
---   tween_frame(1, 2000, 5)
---   ```
---
--- @param img_id number The identifier of the image to adjust.
--- @param milliseconds number Duration of the frame transition in milliseconds.
--- @param frame number The target frame (0-based).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_frame#cmd
---
--- @see imageframe to change the frame of an image instantly.
--- @see tween_animate to animate an images' frames.
function tween_frame(img_id, milliseconds, frame) end

--- Creates a movement tween to move an image to a specified position over time.
---
--- The image will move to the target coordinates (`X`, `Y`) and optionally rotate to the specified angle.
---
--- **Important Notes**:
--- * Time is specified in milliseconds (`1000` ms = `1` second).
--- * Rotation is optional; omit the parameter if no rotation is required.
---
--- **Examples**:
--- * Move an image to (`100`, `200`) over `3` seconds:
---   ```lua
---   tween_move(1, 3000, 100, 200)
---   ```
--- * Move and rotate an image to (`50`, `50`) with a `90°` rotation over `2` seconds:
---   ```lua
---   tween_move(2, 2000, 50, 50, 90)
---   ```
---
--- @param img_id number The identifier of the image to move.
--- @param milliseconds number Duration of the movement in milliseconds.
--- @param x number The target `X`-coordinate.
--- @param y number The target `Y`-coordinate.
--- @param rot? number Optional. The target rotation angle in degrees.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_move#cmd
---
--- @see imagepos to change an image's position instantly.
function tween_move(img_id, milliseconds, x, y, rot) end

--- Creates a rotation tween to rotate an image to a specified angle over time.
---
--- **Important Notes**:
--- * Time is specified in milliseconds (`1000` ms = `1` second).
---
--- **Example**:
--- * Rotate an image to `180°` over `2` seconds:
---   ```lua
---   tween_rotate(1, 2000, 180)
---   ```
---
--- @param img_id number The identifier of the image to rotate.
--- @param milliseconds number Duration of the rotation in milliseconds.
--- @param rot number The target rotation angle in degrees.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_rotate#cmd
---
--- @see imagepos to change an image's rotation instantly.
--- @see tween_rotateconstantly to rotate an image constantly.
function tween_rotate(img_id, milliseconds, rot) end

--- Creates a constant rotation animation for an image.
---
--- The image will rotate continuously at the specified speed until another tween with rotation is applied.
---
--- **Important Notes**:
--- * Negative speed values rotate the image counter-clockwise.
---
--- **Examples**:
--- * Rotate an image clockwise at a speed of `30`:
---   ```lua
---   tween_rotateconstantly(1, 30)
---   ```
--- * Rotate an image counter-clockwise at a speed of `-20`:
---   ```lua
---   tween_rotateconstantly(2, -20)
---   ```
---
--- @param img_id number The identifier of the image to rotate.
--- @param speed number The rotation speed (negative for counter-clockwise).
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_rotateconstantly#cmd
---
--- @see tween_rotate to rotate an image gradually.
function tween_rotateconstantly(img_id, speed) end

--- Creates a scale tween to adjust the size of an image over time.
---
--- The image will transition to the specified width and height factors within the given duration.
---
--- **Important Notes**:
--- * Scaling factors are relative to the original size (`1.0` for original size, `0.5` for half, `2.0` for double, etc.).
--- * Negative values will mirror the image.
--- * Time is specified in milliseconds (`1000` ms = `1` second).
---
--- **Examples**:
--- * Scale an image to half size over `3` seconds:
---   ```lua
---   tween_scale(1, 3000, 0.5, 0.5)
---   ```
--- * Mirror an image horizontally over `1` second:
---   ```lua
---   tween_scale(2, 1000, -1.0, 1.0)
---   ```
---
--- @param img_id number The identifier of the image to scale.
--- @param milliseconds number Duration of the scaling in milliseconds.
--- @param x number The width scaling factor.
--- @param y number The height scaling factor.
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=tween_scale#cmd
---
--- @see imagescale to set an image's scale instantly.
function tween_scale(img_id, milliseconds, x, y) end

--- Prints all Lua variables in the main table to the CS2D console.
---
--- This function is primarily used for debugging purposes.
---
--- **Examples**:
--- * Display all Lua variables:
---   ```lua
---   vars()
---   ```
---
--- @docs https://cs2d.com/help.php?luacat=all&luacmd=vars#cmd
---
--- @see funcs to print all functions.
function vars() end
